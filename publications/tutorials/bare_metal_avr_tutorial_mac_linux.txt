Sargis Yonan's Bare Metal AVR Recipe (macOS 10.12 and newer & Linux/Debian)


Mac Install Instructions:

1. Install the Homebrew Package Manager if not already installed.

  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

2. Add the AVR Crosspack Repository to Homebrew

  brew tap osx-cross/avr

3. Install the binary utilities, compiler, and libc

  brew install avr-libc

4. Install the programmer

  brew install avrdude --with-usb

Linux/Debian Install Instuctions:
1. sudo apt-get install gcc-avr binutils-avr gdb-avr avr-libc avrdude


Programming Instructions:

1. Use avr-gcc to compile your programs. You must specify the microcontroller
  you intend to program using the -mmcu= flag. e.x. for AVR Atmega 328P:

  avr-gcc -mmcu=atmega328p -D F_CPU=16000000UL -Wall -I drivers/uart_driver main.c

2. Use avr-gcc to link your files, and to make an .elf file using the -lm flag.
  Specify the -mmcu flag here as well. Here we'll also enable printf and floating point printing.
  e.x.:

  avr-gcc -mmcu=atmega328p -Wl,-u,vfprintf -lm -lprintf_flt -omy_program.elf ./*.o

3. Use avr-objcopy to create a programmable obejct file for your device.
  e.x.:

  avr-objcopy -j .text -j .data -O ihex my_program.elf my_program.hex

4. Figure out the path to your serial device in your /dev/ file

  ls /dev/


5. Use avrdude to program your device
  The -P option specifies the path to your device that you found in your /dev file
  The -p option specifies the device to program
  At any time, you can grab a list of the supported devices using:
  avrdude -p ?
  The -c option specifies the physical programmer used (A USBASP ICSP in this case)
  At any time, you can grab a list of the supported programmers using:
  avrdude -c ?

  avrdude -F -V -P /dev/tty.usbserial* -p ATMEGA328P -c usbasp -e -b 115200 -U flash:w:my_program.hex

  If programming an Arduino UNO board:
  avrdude -F -V -P /dev/tty.wchusbserial* -p ATMEGA328P -c arduino -e -b 115200 -U flash:w:my_program.hex


EXAMPLE MAKEFILE
################################################################################

# MICROCONTROLELR DEFINITIONS #
CC = avr-gcc
BURNER = avrdude
CC_AVR = atmega328p
F_CPU = 16000000UL
BURNER_AVR = ATMEGA328P
BURNER_PROGRAMMER = arduino
COMPILER_PATH = /dev/tty.wchusbserial*
OBJECT_COPY = avr-objcopy
BAUDRATE = 115200
###########################################

# CC GLOBAL DEFINES
CC_GLOBAL_DEFINES = -D F_CPU=${F_CPU}

###########################################
# MAIN SOURCE
CSOURCE = main.c

####################
# DRIVER HEADERS #
# UART DRIVER
SEARCHABLE_HEADER_FILE_DIRS += -I drivers/uart_driver
# BUFFER
SEARCHABLE_HEADER_FILE_DIRS += -I drivers/buffer
# TWI
SEARCHABLE_HEADER_FILE_DIRS += -I drivers/twi
# I2C DRIVER
SEARCHABLE_HEADER_FILE_DIRS += -I drivers/i2c_driver
# CLOCK
SEARCHABLE_HEADER_FILE_DIRS += -I drivers/clock
# ITG3200
SEARCHABLE_HEADER_FILE_DIRS += -I drivers/itg3200_gyro

####################
# PROTOCOL HEADERS #
# UART #
SEARCHABLE_HEADER_FILE_DIRS += -I protocols/uart
# I2C #
SEARCHABLE_HEADER_FILE_DIRS += -I protocols/i2c
# GYRO #
SEARCHABLE_HEADER_FILE_DIRS += -I protocols/gyro
# TEMP #
SEARCHABLE_HEADER_FILE_DIRS += -I protocols/temperature

####################

######################################################

####################
# DRIVER SOURCES #
# UART #
CSOURCE += drivers/uart_driver/uart_driver.c
# BUFFER #
CSOURCE += drivers/buffer/buffer.c
# TWI #
CSOURCE += drivers/twi/twi.c
# CLOCK #
CSOURCE += drivers/clock/clock.c
# I2C #
CSOURCE += drivers/i2c_driver/i2c_driver.c
# ITG3200 #
CSOURCE += drivers/itg3200_gyro/itg3200.c
####################

####################
# PROTOCOL SOURCES #
# UART #
CSOURCE += protocols/uart/uart.c
# I2C #
CSOURCE += protocols/i2c/i2c.c
# GYRO #
CSOURCE += protocols/gyro/gyro.c
# TEMP #
CSOURCE += protocols/temperature/temperature.c
####################

######################################################

C_STD = gnu99

OBJECTS = ./*.o
EXECUTABLE = Pigeon

########### COMPILER OPTIONS ##############
CFLAGS += -Wall
CFLAGS += -Werror
CFLAGS += -Wextra
CFLAGS += -Wimplicit

CFLAGS += -std=${C_STD}

# CC OPTIONS #
# OPTIMIZATION FLAG
CC_COMP_OPTIONS += -Os
# UC DEF
CC_COMP_OPTIONS += -mmcu=${CC_AVR}
# GLOBAL DEFINES FLAGS
CC_COMP_OPTIONS += ${CC_GLOBAL_DEFINES}
# CC WARNING FLAGS
CC_COMP_OPTIONS += ${CFLAGS}
# HEADER FILES
CC_COMP_OPTIONS += ${SEARCHABLE_HEADER_FILE_DIRS}
# SOURCE FILES
CC_COMP_OPTIONS += -c ${CSOURCE}


# CC LINKER OPTIONS #
CC_LN_OPTIONS += -mmcu=${CC_AVR}
CC_LN_OPTIONS += -Wl,-u,vfprintf
CC_LN_OPTIONS += -lm
CC_LN_OPTIONS += -lprintf_flt
CC_LN_OPTIONS += -o${EXECUTABLE}.elf
CC_LN_OPTIONS += ${OBJECTS}


all:
  ${CC} ${CC_COMP_OPTIONS}
  ${CC} ${CC_LN_OPTIONS}

  ${OBJECT_COPY} -j .text -j .data -O ihex ${EXECUTABLE}.elf ${EXECUTABLE}.hex
  ${BURNER} -F -V -P ${COMPILER_PATH} -p ${BURNER_AVR} -c ${BURNER_PROGRAMMER} -e -b ${BAUDRATE} -U flash:w:${EXECUTABLE}.hex
  rm -f ${OBJECTS} ${EXECUTABLE}.elf ${EXECUTABLE}.hex
